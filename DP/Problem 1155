1155. Number of Dice Rolls With Target Sum

You have d dice, and each die has f faces numbered 1, 2, ..., f.
Return the number of possible ways (out of fd total ways) modulo 10^9 + 7 to roll the dice so the sum of the face up numbers equals target.
 
Example 1:
Input: d = 1, f = 6, target = 3
Output: 1
Explanation: 
You throw one die with 6 faces.  There is only one way to get a sum of 3.
Example 2:
Input: d = 2, f = 6, target = 7
Output: 6
Explanation: 
You throw two dice, each with 6 faces.  There are 6 ways to get a sum of 7:
1+6, 2+5, 3+4, 4+3, 5+2, 6+1.
Example 3:
Input: d = 2, f = 5, target = 10
Output: 1
Explanation: 
You throw two dice, each with 5 faces.  There is only one way to get a sum of 10: 5+5.
Example 4:
Input: d = 1, f = 2, target = 3
Output: 0
Explanation: 
You throw one die with 2 faces.  There is no way to get a sum of 3.
Example 5:
Input: d = 30, f = 30, target = 500
Output: 222616187
Explanation: 
The answer must be returned modulo 10^9 + 7.
 
Constraints:
1 <= d, f <= 30
1 <= target <= 1000
给出d个有f面的骰子，每一面分别地代表数值1-f。给出一个数值target，问一共有多少种方法，使得这d个骰子的向上的值的和等于target。
这道题可以使用dp来解。
dp[d][t]，代表用d个骰子来表示数值t的方法总数；
dp[d][t] = sum{dp[d - 1][t - j]}(j=from 1 to f)
class Solution {
private:
    const int MOD_NUM = 1000000000 + 7;
/*  int constructDP(int d, int f, int target, vector<vector<int> >& dp){
        if(dp[d][target] != -1) return dp[d][target];
        
        if(d == 1){
            return dp[d][target] = f >= target;
        }
        int res = 0;
        for(int i = 1; i <= f; i++){
            res += constructDP(d - 1, f, target - i, dp);
            res %= MOD_NUM;
        }
        return res;
    }
*/
public:
    int numRollsToTarget(int d, int f, int target) {
        vector<vector<int> > dp(d + 1, vector<int>(target + 1, 0));
        for(int i = 1; i <= target; i++){
            if(i <= f) dp[1][i] = 1;
            else dp[1][i] = 0;
        }
        for(int i = 2; i <= d; i++){
            for(int j = 1; j <= target; j++){
                for(int k = 1; k <= f; k++){
                    if(j - k >= 1){
                        dp[i][j] = (dp[i][j] + dp[i - 1][j - k]) % MOD_NUM;
                    }
                }
            }
        }
        
        return dp[d][target];
    }
};
